{% set project_name = kwargs['project_name'] -%}
{% set model_name = kwargs['model_name'] -%}
{% set table = kwargs['table'] -%}
{% set title = table.replace("_", " ").title() %}
{% set table_schema = kwargs['table_schema'] -%}
{% set image_fields = kwargs['image_fields'] -%}
"""Routes for {{ table }}"""
from flask import Blueprint, render_template, request, flash, redirect, session
from flask_login import current_user, login_required
from app.models import connect_to_db, db, {{ model_name }}
from app.mod_{{ table }}.{{ table }}_form import {{ model_name }}Form
{% if image_fields -%}
  from app.utils.image_handler import save_image
{% endif %}
# Blueprint Config
{%- set bp = table ~ '_bp' %}
{{ bp }} = Blueprint('{{ bp }}', __name__,
                       template_folder='templates',
                       static_folder='static',
                       url_prefix='/{{ table }}')

#################### ROUTES FOR {{ table.upper() }} ######################
@{{ bp }}.route('/', methods=['GET'])
@login_required
def show_{{ table }}():
    {{ table }} = {{ model_name }}.query.all()

    return render_template('{{ table }}_list.html',
                           title='{{ title }}',
                           {{ table }}={{ table }})


@{{ bp }}.route('/create', methods=['GET', 'POST'])
@login_required
def create_{{ table }}():
    form = {{ model_name }}Form()
    if form.validate_on_submit():
        # Get form data

        {%- for field in table_schema %}
        {%- if field in image_fields %}
        {%- set img_prefix = table %}
        image_data = request.files[form.{{ field }}.name]
        {{ field }} = save_image(image_data, '{{ img_prefix }}') if image_data else ''
        {%- else %}
        {{ field }} = form.{{ field }}.data
        {%- endif %}
        {%- endfor %}

        new_{{ table }} = {{ model_name }}(
            {%- for field in table_schema %}
                {{ field }}={{ field }},
            {%- endfor %}
                user_id = current_user.id)

        db.session.add(new_{{ table }})
        db.session.commit()
        flash(f"A {{ model_name }} has been created.")
        return redirect(f"/{{ table }}/{new_{{ table }}.id}")

    return render_template('{{ table }}_create.html', title="Create {{ title }}", mod_name="mod_{{ table }}", form=form)


@{{ bp }}.route('/update/<int:{{ table }}_id>', methods=['GET', 'POST'])
@login_required
def update_{{ table }}({{ table }}_id):
    {{ table }} = {{ model_name }}.query.get({{ table }}_id)
    form = {{ model_name }}Form()

    if form.validate_on_submit():
        {%- for field in table_schema %}
        {%- if field in image_fields %}
        {%- set img_prefix = table %}
        image_data = request.files[form.{{ field }}.name]
        if image_data:
            {{ table ~ "." ~ field }} = save_image(image_data, '{{ img_prefix }}')
        {%- else %}
        {{ table ~ "." ~ field }} = form.{{ field }}.data
        {%- endif %}
        {%- endfor %}

        db.session.commit()
        return redirect(f"/{{ table }}/{{ "{" ~ table ~ "_id}" }}")

    {% for field in table_schema -%}
        form.{{ field }}.data = {{ table ~ "." ~ field }}
    {% endfor -%}

    return render_template('{{ table }}_update.html',
                           title='{{ title }}', id={{ table }}_id, mod_name="mod_{{ table }}", form=form)


@{{ bp }}.route('/<int:{{ table }}_id>', methods=['GET'])
@login_required
def show_{{ table }}_details({{ table }}_id):
    {{ table }} = {{ model_name }}.query.get({{ table }}_id)
    return render_template("{{ table }}_details.html", title="{{ title }}", {{ table }}={{ table }})



@{{ bp }}.route('/del/<int:{{ table }}_id>', methods=['GET', 'POST'])
@login_required
def delete_field({{ table }}_id):
    {{ table }} = {{ model_name }}.query.get({{ table }}_id)

    if request.method == 'GET':
        return render_template('{{ table }}_delete.html',
                               title='Delete {{ title }}', id={{ table }}_id, {{ table }}={{ table }})

    if request.method == 'POST':
        db.session.delete({{ table }})
        db.session.commit()
        return redirect("/{{ table }}")

